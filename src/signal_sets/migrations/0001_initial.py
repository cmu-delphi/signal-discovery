# Generated by Django 5.0.7 on 2024-10-07 18:20

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('datasources', '0001_initial'),
        ('signals', '0002_auto_20241002_2027'),
    ]

    operations = [
        migrations.CreateModel(
            name='SignalSet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, unique=True, verbose_name='255')),
                ('data_description', models.TextField(blank=True, verbose_name='Data Description')),
                ('maintainer_name', models.CharField(blank=True, max_length=128, verbose_name='Maintainer Name')),
                ('maintainer_email', models.CharField(blank=True, max_length=128, verbose_name='Maintainer Email')),
                ('organization', models.CharField(blank=True, max_length=128, verbose_name='Organization')),
                ('language', models.CharField(blank=True, max_length=128, verbose_name='Language')),
                ('version_number', models.CharField(blank=True, max_length=128, verbose_name='Version Number')),
                ('origin_datasource', models.CharField(blank=True, max_length=128, verbose_name='Origin Data Source')),
                ('data_type', models.CharField(blank=True, max_length=128, verbose_name='Data Type')),
                ('preprocessing_description', models.CharField(blank=True, max_length=128, verbose_name='Preprocessing Description')),
                ('temporal_scope_start', models.CharField(help_text='Temporal scope start of the signal set.', max_length=255, verbose_name='temporal scope start')),
                ('temporal_scope_end', models.CharField(help_text='Temporal scope end of the signal set.', max_length=255, verbose_name='temporal scope end')),
                ('temporal_granularity', models.CharField(help_text='Temporal granularity of the signal set.', max_length=255, verbose_name='temporal granularity')),
                ('reporting_cadence', models.CharField(help_text='Reporting cadence of the signal set.', max_length=255, verbose_name='reporting cadence')),
                ('reporting_lag', models.CharField(help_text='Typical reporting lag of the signal set.', max_length=255, verbose_name='typical reporting lag')),
                ('revision_cadence', models.CharField(help_text='Revision cadence of the signal set.', max_length=255, verbose_name='revision cadence')),
                ('demographic_scope', models.CharField(help_text='Demographic scope of the signal set.', max_length=255, verbose_name='demographic scope')),
                ('demographic_granularity', models.CharField(help_text='Demographic granularity of the signal set.', max_length=255, verbose_name='demographic granularity')),
                ('censoring', models.CharField(help_text='Data censoring of the signal set.', max_length=255, verbose_name='data censoring')),
                ('missingness', models.CharField(help_text='Missingness of the signal set.', max_length=255, verbose_name='missingness')),
                ('dua_required', models.BooleanField(help_text='Whether a data use agreement is required to access the signal set.', verbose_name='DUA Required')),
                ('license', models.CharField(help_text='License of the signal set.', max_length=255, verbose_name='license')),
                ('dataset_location', models.CharField(help_text='Location of the dataset.', max_length=255, verbose_name='dataset location')),
                ('link_to_dictionary', models.CharField(help_text='Link to the dictionary.', max_length=255, verbose_name='link to dictionary')),
                ('data_source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='datasources.datasource', verbose_name='Data Source')),
                ('geographic_scope', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='signal_sets', to='signals.geographicscope', verbose_name='Geographic Scope')),
                ('pathogens', models.ManyToManyField(help_text='Pathogen(s) associated with the signal set.', related_name='signal_sets', to='signals.pathogen', verbose_name='Pathogen')),
                ('severity_pyramid_rungs', models.ManyToManyField(blank=True, help_text='Severity pyramid rungs of the signal set.', null=True, related_name='signal_sets', to='signals.severitypyramidrung')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='SignalSetGeography',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('aggregated_by_delphi', models.BooleanField(default=False)),
                ('geography', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='geography_signal_sets', to='signals.geography')),
                ('signal_set', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='geography_signal_sets', to='signal_sets.signalset')),
            ],
            options={
                'verbose_name_plural': 'Signal Geographies',
                'unique_together': {('geography', 'signal_set')},
            },
        ),
        migrations.AddField(
            model_name='signalset',
            name='available_geography',
            field=models.ManyToManyField(related_name='signal_sets', through='signal_sets.SignalSetGeography', to='signals.geography', verbose_name='Available Geography'),
        ),
        migrations.AlterUniqueTogether(
            name='signalset',
            unique_together={('name', 'data_source')},
        ),
    ]
