# Generated by Django 5.0.7 on 2024-10-02 20:27

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('base', '0001_initial'),
        ('datasources', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='SignalsDbView',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('active', models.BooleanField()),
                ('datasource', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('geographic_scope', models.CharField(max_length=255)),
                ('temporal_scope_start', models.CharField(max_length=255)),
                ('temporal_scope_end', models.CharField(max_length=255)),
                ('time_type', models.CharField(max_length=255)),
                ('reporting_cadence', models.CharField(max_length=255)),
                ('typical_reporting_lag', models.CharField(max_length=255)),
                ('typical_revision_cadence', models.TextField()),
                ('demographic_scope', models.CharField(max_length=255)),
                ('severity_pyramid_rung', models.CharField(max_length=255)),
                ('missingness', models.TextField()),
                ('license', models.CharField(max_length=255)),
                ('restrictions', models.TextField()),
                ('available_geography', models.CharField(max_length=255)),
                ('pathogens', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'signals_signal_view',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='Name of the category.', max_length=255, unique=True, verbose_name='name')),
                ('display_name', models.CharField(blank=True, help_text='Display name of the category.', max_length=255, null=True, verbose_name='display name')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FormatType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='Name of the format type.', max_length=255, unique=True, verbose_name='name')),
                ('display_name', models.CharField(blank=True, help_text='Display name of the format type.', max_length=255, null=True, verbose_name='display name')),
            ],
            options={
                'verbose_name_plural': 'Format Types',
            },
        ),
        migrations.CreateModel(
            name='GeographicScope',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='Name of the geographic scope.', max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Geography',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='Name of the geography.', max_length=255, unique=True, verbose_name='name')),
                ('display_name', models.CharField(help_text='Display name of the geography.', max_length=255, verbose_name='display name')),
                ('display_order_number', models.IntegerField(help_text='Display order number of the geography.', verbose_name='display order number')),
            ],
            options={
                'verbose_name_plural': 'geographies',
                'ordering': ['display_order_number'],
            },
        ),
        migrations.CreateModel(
            name='Pathogen',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='Name of the pathogen.', max_length=128, unique=True, verbose_name='name')),
                ('display_name', models.CharField(blank=True, max_length=128, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SeverityPyramidRung',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='Name of the severity pyramid rung.', max_length=255, unique=True, verbose_name='name')),
                ('display_name', models.CharField(blank=True, help_text='Display name of the severity pyramid rung.', max_length=255, null=True, verbose_name='display name')),
            ],
            options={
                'verbose_name_plural': 'Severity Pyramid Rungs',
            },
        ),
        migrations.CreateModel(
            name='SignalType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='Name of the signal type.', max_length=128, unique=True, verbose_name='name')),
                ('display_name', models.CharField(blank=True, help_text='Display name of the signal type.', max_length=128, null=True, verbose_name='display name')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GeographyUnit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('geo_id', models.CharField(help_text='Geo ID', max_length=128)),
                ('name', models.CharField(help_text='Name', max_length=128)),
                ('display_name', models.CharField(help_text='Display Name', max_length=128)),
                ('level', models.IntegerField(help_text='Level')),
                ('geography', models.ForeignKey(help_text='Geography', on_delete=django.db.models.deletion.CASCADE, related_name='geography_units', to='signals.geography')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Signal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='Name of the signal.', max_length=255, verbose_name='name')),
                ('display_name', models.CharField(help_text='Display name of the signal.', max_length=255, verbose_name='display name')),
                ('active', models.BooleanField(default=False, help_text='Ongoing', verbose_name='active')),
                ('description', models.TextField(help_text='Description of the signal.', verbose_name='description')),
                ('short_description', models.TextField(blank=True, help_text='Short description of the signal.', null=True, verbose_name='short description')),
                ('time_type', models.CharField(help_text='Time type of the signal.', max_length=255, verbose_name='time type')),
                ('time_label', models.CharField(help_text='Time label of the signal.', max_length=255, verbose_name='time label')),
                ('reporting_cadence', models.CharField(help_text='Reporting cadence of the signal.', max_length=255, verbose_name='reporting cadence')),
                ('typical_reporting_lag', models.CharField(help_text='Typical reporting lag of the signal.', max_length=255, verbose_name='typical reporting lag')),
                ('typical_revision_cadence', models.TextField(help_text='Typical revision cadence of the signal.', verbose_name='typical revision cadence')),
                ('demographic_scope', models.CharField(help_text='Demographic scope of the signal.', max_length=255, verbose_name='demographic scope')),
                ('temporal_scope_start', models.CharField(help_text='Temporal scope start of the signal.', max_length=255, verbose_name='temporal scope start')),
                ('temporal_scope_start_note', models.TextField(help_text='Temporal scope start note of the signal.', verbose_name='temporal scope start note')),
                ('temporal_scope_end', models.CharField(help_text='Temporal scope end of the signal.', max_length=255, verbose_name='temporal scope end')),
                ('temporal_scope_end_note', models.TextField(help_text='Temporal scope end note of the signal.', verbose_name='temporal scope end note')),
                ('is_smoothed', models.BooleanField(default=False, help_text='Is smoothed', verbose_name='is smoothed')),
                ('is_weighted', models.BooleanField(default=False, help_text='Is weighted', verbose_name='is weighted')),
                ('is_cumulative', models.BooleanField(default=False, help_text='Is cumulative', verbose_name='is cumulative')),
                ('has_stderr', models.BooleanField(default=False, help_text='Has stderr', verbose_name='has stderr')),
                ('has_sample_size', models.BooleanField(default=False, help_text='Has sample size', verbose_name='has sample size')),
                ('high_values_are', models.CharField(help_text='High values are', max_length=128)),
                ('data_censoring', models.TextField(blank=True, help_text='Data censoring', null=True)),
                ('missingness', models.TextField(blank=True, help_text='Missingness', null=True)),
                ('organization_access_list', models.CharField(help_text='Organisations Access List. Who may access this signal?', max_length=128)),
                ('organization_sharing_list', models.CharField(help_text='Organisations Sharing List. Who may share this signal?', max_length=128)),
                ('license', models.CharField(help_text='License', max_length=128)),
                ('restrictions', models.TextField(blank=True, help_text='Restrictions', null=True)),
                ('last_updated', models.DateField(blank=True, help_text='Last Updated', null=True)),
                ('from_date', models.DateField(blank=True, help_text='From Date', null=True)),
                ('to_date', models.DateField(blank=True, help_text='To Date', null=True)),
                ('signal_availability_days', models.IntegerField(blank=True, help_text='Signal Availability Days', null=True)),
                ('base', models.ForeignKey(blank=True, help_text='Base signal', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='base_for', to='signals.signal')),
                ('category', models.ForeignKey(help_text='Category of the signal.', on_delete=django.db.models.deletion.PROTECT, related_name='signals', to='signals.category')),
                ('format_type', models.ForeignKey(blank=True, help_text='Format type of the signal.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='signals', to='signals.formattype')),
                ('geographic_scope', models.ForeignKey(help_text='Geographic scope of the signal.', on_delete=django.db.models.deletion.PROTECT, related_name='signals', to='signals.geographicscope')),
                ('pathogen', models.ManyToManyField(help_text='Pathogen/Disease area', related_name='signals', to='signals.pathogen')),
                ('related_links', models.ManyToManyField(help_text='Related signal links.', related_name='signals', to='base.link')),
                ('severity_pyramid_rung', models.ForeignKey(blank=True, help_text='Severity pyramid rungs of the signal.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='signals', to='signals.severitypyramidrung')),
                ('source', models.ForeignKey(help_text='Source Subdivision', on_delete=django.db.models.deletion.PROTECT, related_name='signals', to='datasources.sourcesubdivision')),
            ],
            options={
                'ordering': ['modified'],
            },
        ),
        migrations.CreateModel(
            name='SignalGeography',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('aggregated_by_delphi', models.BooleanField(default=False)),
                ('geography', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='geography_signals', to='signals.geography')),
                ('signal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='geography_signals', to='signals.signal')),
            ],
            options={
                'verbose_name_plural': 'Signal Geographies',
                'unique_together': {('geography', 'signal')},
            },
        ),
        migrations.AddField(
            model_name='signal',
            name='available_geography',
            field=models.ManyToManyField(help_text='Available geographies for the signal.', related_name='signals', through='signals.SignalGeography', to='signals.geography'),
        ),
        migrations.AddField(
            model_name='signal',
            name='signal_type',
            field=models.ForeignKey(blank=True, help_text='Type of the signal.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='signals', to='signals.signaltype'),
        ),
        migrations.AlterUniqueTogether(
            name='signal',
            unique_together={('name', 'source')},
        ),
    ]
